[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vertex"
version = "0.1.0"
description = "A powerful local AI workflow system with multi-model support and visual workflow orchestration"
authors = [
    {name = "Vertex Team", email = "skyzlxuan@gmail.com"}
]
maintainers = [
    {name = "Vertex Team", email = "skyzlxuan@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing"
]
keywords = ["ai", "workflow", "llm", "qwen", "ollama", "automation", "vertex-flow"]
dependencies = [
    "autopep8>=2.3.2",
    "black>=25.1.0",
    "flake8>=7.2.0",
    "isort>=6.0.1",
    "requests>=2.28.2",
    "gradio>=3.50.0",
    "python-dotenv>=0.21.0",
    "openai>=1.0.0",
    "tqdm>=4.65.0",
]

[project.urls]
Homepage = "https://github.com/ashione/vertex"
Repository = "https://github.com/ashione/vertex.git"
Documentation = "https://github.com/ashione/vertex/blob/main/README.md"
"Bug Tracker" = "https://github.com/ashione/vertex/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0"
]

[project.scripts]
vertex = "vertex_flow.src.app:main"
vertex-workflow = "vertex_flow.workflow.app.app:main"



[tool.uv]
index-url = "https://mirrors.aliyun.com/pypi/simple/"
extra-index-url = ["https://pypi.org/simple/"]
trusted-hosts = ["mirrors.aliyun.com"]

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "**/.venv/*",
    "**/venv/*",
    "**/.git/*",
    "**/build/*",
    "**/dist/*"
]

[tool.flake8]
max-line-length = 120
ignore = ["E203", "W503", "E501", "E402"]
# Explicitly check for import * violations
select = ["F403", "F405"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    "build",
    "dist"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "vertex_flow/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]

[tool.pytest_asyncio]
mode = "auto"
