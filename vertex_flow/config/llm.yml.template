# 配置模板文件 - 请根据此模板创建您的实际配置文件
# 通过docker env可以注入相关的配置，作为修改值
# 例如ll.deepseek.sk，则通过llm_deepseek_sk环境变量
# 在docker启动时设置-e llm_deepseek_sk=?
#
# 本地模型支持（Ollama）:
# 1. 安装Ollama: https://ollama.com/download
# 2. 启动服务: ollama serve
# 3. 拉取模型: ollama pull qwen:7b
# 4. 在应用中切换到ollama提供商
llm:
  moonshoot:
    sk: ${llm.moonshoot.sk:-YOUR_MOONSHOT_API_KEY}
    enabled: false
    model-name: moonshot-v1-128k
  deepseek:
    sk: ${llm.deepseek.sk:-YOUR_DEEPSEEK_API_KEY}
    enabled: false
    model-name: deepseek-chat
  tongyi:
    sk: ${llm.tongyi.sk:-YOUR_TONGYI_API_KEY}
    enabled: false
    model-name: qwen-max
  openrouter:
    sk: ${llm.openrouter.sk:-YOUR_OPENROUTER_API_KEY}
    enabled: false
    model-name: deepseek/deepseek-chat-v3-0324:free
  ollama:
    sk: ${llm.ollama.sk:-ollama-local}          # 本地模型不需要真实API key，使用占位符
    enabled: false                               # 默认不启用，需要手动切换
    model-name: ${llm.ollama.model:-qwen:7b}    # Ollama模型名称，例如: qwen:7b, llama3:8b
    base-url: ${llm.ollama.base_url:-http://localhost:11434}  # Ollama服务地址

web-search:
  bocha:
    sk: ${web-search.bocha.sk:-YOUR_BOCHA_API_KEY}
    enabled: false
  bing:
    sk: ${web-search.bing.sk:-YOUR_BING_API_KEY}
    enabled: false

# 金融工具配置
finance:
  alpha-vantage:
    api-key: ${finance.alpha-vantage.api-key:-YOUR_ALPHA_VANTAGE_API_KEY}
    enabled: false
  finnhub:
    api-key: ${finance.finnhub.api-key:-YOUR_FINNHUB_API_KEY}
    enabled: false
  yahoo-finance:
    enabled: true

workflow:
  dify:
    root-path: config/
    instances:
    - name: if_else_test
      path: if-else-test.yml

web:
  port: 8999
  host: 0.0.0.0
  workers: 8

# 向量存储配置（支持本地和云端）
vector:
  # 本地向量存储配置
  local:
    enabled: true  # 默认启用本地向量存储
    dimension: 384  # 向量维度
    index_name: "default"  # 索引名称
    persist_dir: null  # 持久化目录，null表示使用默认目录 (~/.vertex_flow/vector_db)
  
  # DashVector云端配置
  dashvector:
    enabled: false  # 默认不启用云端
    api-key: ${vector.dashvector.api_key:-YOUR_DASHVECTOR_API_KEY}
    endpoint: ${vector.dashvector.endpoint:-YOUR_DASHVECTOR_ENDPOINT}
    cluster: ${vector.dashvector.cluster:-vertex-vector}
    collection: ${vector.dashvector.collection:-YOUR_COLLECTION_NAME}
    image-collection: ${vector.dashvector.image_collection:-YOUR_IMAGE_COLLECTION_NAME}

# 嵌入模型配置（支持本地和云端）
embedding:
  # 本地嵌入模型配置
  local:
    enabled: true  # 默认启用本地嵌入
    model_name: "all-MiniLM-L6-v2"  # 本地嵌入模型名称
    dimension: 384  # 向量维度
    use_mirror: true  # 是否使用国内镜像源（默认true）
    mirror_url: "https://hf-mirror.com"  # 镜像源URL
  
  # DashScope云端配置
  dashscope:
    enabled: false  # 默认不启用云端
    endpoint: ${embedding.dashscope.endpoint:-default}
    api-key: ${embedding.dashscope.api_key:-YOUR_DASHSCOPE_API_KEY}
    model-name: ${embedding.dashscope.model_name:-text-embedding-v1}
  
  # BCE云端配置
  bce:
    enabled: false  # 默认不启用云端
    api-key: ${embedding.bce.api_key:-YOUR_BCE_API_KEY}
    endpoint: ${embedding.bce.endpoint:-https://api.siliconflow.cn/v1/embeddings}
    model-name: ${embedding.bce.model_name:-netease-youdao/bce-embedding-base_v1}

# 重排序配置
rerank:
  # 本地重排序配置
  local:
    enabled: false  # 默认不启用本地重排序
    method: "keyword"  # 重排序方法：keyword, semantic
  
  # BCE云端重排序配置
  bce:
    enabled: false  # 默认不启用云端重排序
    api-key: ${rerank.bce.api_key:-YOUR_BCE_RERANK_API_KEY}
    endpoint: ${rerank.bce.endpoint:-https://api.siliconflow.cn/v1/rerank}
    model-name: ${rerank.bce.model_name:-netease-youdao/bce-reranker-base_v1}

# 文档处理配置
document:
  chunk_size: 1000  # 文档分块大小
  chunk_overlap: 200  # 分块重叠大小
  supported_formats: ["txt", "md", "pdf", "docx"]  # 支持的文档格式

# 检索配置
retrieval:
  top_k: 3  # 检索的文档数量
  similarity_threshold: 0.7  # 相似度阈值
  rerank: false  # 是否启用重排序 